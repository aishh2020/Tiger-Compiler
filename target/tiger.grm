(* This is the preamble where you can have arbitrary sml code. For us
it is empty *)

%%
(* The terminals or tokens of the language *)
%term CONST of int
    | PLUS
    | MINUS
    | MUL
    | DIV
    | EOF
    | NEWLINE
    | ASSIGN
    | PRINT
    | VAR of string
(* The nonterminals of the language *)
%nonterm EXP     of Ast.Expr
       | STMT    of Ast.Stmt
       | STMTS   of Ast.Stmt list
       | PROGRAM of Ast.Stmt list
 
%eop EOF (* What token to use as end of parsing token              *)
%verbose (* Generates a printed form of the table in expr.grm.desc *)
%pure


%name Expr (* The prefix to use on the name of LrValFun structure *)


%noshift EOF
(*

Operator precedence and associativity. The %left says the operator is
left associative and the precedence increase as you go down this list.

*)

%left PLUS MINUS  (* + and - are of same precedence *)
%left MUL  DIV      (* and / higher than + and -            *)

(* The type that captures position in the input *)
%pos int

%%

PROGRAM : STMTS                 ( STMTS )
	| STMTS NEWLINE         ( STMTS )

STMTS   : (* empty *)          ( []                  )
	| STMT NEWLINE STMTS     ( EXP :: EXPS         )

STMT    : VAR ASSIGN EXP       (Ast.Assigns VAR EXP)
        | PRINT EXP            (EXP)

EXP     : CONST                ( Ast.Const CONST )
        | VAR                  ( Ast.Var VAR)
        | EXP PLUS EXP         ( Ast.plus  EXP1 EXP2 )
	| EXP MINUS EXP        ( Ast.minus EXP1 EXP2 )
	| EXP MUL   EXP        ( Ast.mul   EXP1 EXP2 )
	| EXP DIV   EXP        ( Ast.divi   EXP1 EXP2 )
  
